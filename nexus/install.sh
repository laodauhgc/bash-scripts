#!/bin/bash
set -e

# Version: v1.4.1 | Update 04/08/2025

# =====================
# Bi·∫øn c·∫•u h√¨nh
# =====================
CONTAINER_NAME="nexus-node"
IMAGE_NAME="nexus-node:latest"
LOG_FILE="/root/nexus_logs/nexus.log"
CREDENTIALS_DIR="/root/nexus_credentials"  # Th∆∞ m·ª•c host ƒë·ªÉ mount ~/.nexus (RW)
NODE_ID_FILE="/root/nexus_node_id.txt"     # File l∆∞u node ID
SWAP_FILE="/swapfile"

WALLET_ADDRESS="$1"
NO_SWAP=0
LANGUAGE="vi"
SETUP_CRON=0  # M·∫∑c ƒë·ªãnh kh√¥ng t·ª± ƒë·ªông thi·∫øt l·∫≠p cron

# =====================
# M√†u s·∫Øc & helpers in ra m√†n h√¨nh
# =====================
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_error()   { echo -e "${RED}‚ùå $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"; }
print_info()    { echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"; }
print_progress(){ echo -e "${CYAN}‚è≥ $1${NC}"; }
print_node()    { echo -e "${GREEN}üöÄ $1${NC}"; }
print_log()     { echo -e "${CYAN}üìú $1${NC}"; }
print_swap()    { echo -e "${BLUE}üíæ $1${NC}"; }
print_docker()  { echo -e "${BLUE}üê≥ $1${NC}"; }

# =====================
# Ti·ªÅn x·ª≠ l√Ω: ch·ªâ b·∫Øt c·ªù ng√¥n ng·ªØ ƒë·ªÉ ƒë·ªãnh nghƒ©a th√¥ng b√°o ƒë√∫ng ng√¥n
# =====================
shift || true
for arg in "$@"; do
    case "$arg" in
        --en) LANGUAGE="en" ;;
        --ru) LANGUAGE="ru" ;;
        --cn) LANGUAGE="cn" ;;
    esac
done

# =====================
# ƒê·ªãnh nghƒ©a th√¥ng ƒëi·ªáp theo ng√¥n ng·ªØ
# =====================
case $LANGUAGE in
    vi)
        BANNER="===== C√†i ƒê·∫∑t Node Nexus v1.4.1 (H·ªó tr·ª£ ARM) ====="
        ERR_NO_WALLET="L·ªói: Vui l√≤ng cung c·∫•p wallet address. C√°ch d√πng: $0 <wallet_address> [--no-swap] [--en|--ru|--cn] [--setup-cron]"
        WARN_INVALID_FLAG="C·∫£nh b√°o: Flag kh√¥ng h·ª£p l·ªá: %s. B·ªè qua."
        SKIP_SWAP_FLAG="B·ªè qua t·∫°o swap theo y√™u c·∫ßu (--no-swap)."
        INSTALLING_DOCKER="C√†i ƒë·∫∑t Docker..."
        ERR_INSTALL_DOCKER="L·ªói: Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Docker."
        ERR_DOCKER_NOT_RUNNING="L·ªói: Docker daemon kh√¥ng ch·∫°y."
        ERR_DOCKER_PERMISSION="L·ªói: Kh√¥ng c√≥ quy·ªÅn ch·∫°y Docker. Ki·ªÉm tra c√†i ƒë·∫∑t ho·∫∑c th√™m user v√†o nh√≥m docker."
        BUILDING_IMAGE="B·∫Øt ƒë·∫ßu x√¢y d·ª±ng image %s‚Ä¶"
        ERR_BUILD_IMAGE="L·ªói: Kh√¥ng th·ªÉ x√¢y d·ª±ng image %s."
        BUILD_IMAGE_SUCCESS="X√¢y d·ª±ng image %s th√†nh c√¥ng."
        NODE_STARTED="ƒê√£ ch·∫°y node v·ªõi wallet_address=%s."
        LOG_FILE_MSG="Log: %s"
        VIEW_LOG="Xem log theo th·ªùi gian th·ª±c: docker logs -f %s"
        NOT_LINUX="H·ªá th·ªëng kh√¥ng ph·∫£i Linux, b·ªè qua t·∫°o swap."
        WARN_NO_RAM="C·∫£nh b√°o: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh RAM h·ªá th·ªëng. B·ªè qua t·∫°o swap v√† ti·∫øp t·ª•c ch·∫°y node."
        RAM_DETECTED="T·ªïng RAM ph√°t hi·ªán: %s MB. Ti·∫øp t·ª•c ki·ªÉm tra swap..."
        SWAP_EXISTS="Swap ƒë√£ t·ªìn t·∫°i (%s MB), b·ªè qua t·∫°o swap."
        INSUFFICIENT_DISK="Kh√¥ng ƒë·ªß dung l∆∞·ª£ng ·ªï c·ª©ng (%s MB) ƒë·ªÉ t·∫°o swap t·ªëi thi·ªÉu (%s MB). B·ªè qua."
        WARN_INVALID_SWAP_SIZE="C·∫£nh b√°o: K√≠ch th∆∞·ªõc swap kh√¥ng h·ª£p l·ªá (%s MB). B·ªè qua t·∫°o swap."
        CREATING_SWAP="T·∫°o swap %s MB..."
        WARN_CREATE_SWAP_FAIL="C·∫£nh b√°o: Kh√¥ng th·ªÉ t·∫°o file swap. B·ªè qua."
        SWAP_CREATED="Swap ƒë√£ ƒë∆∞·ª£c t·∫°o v√† k√≠ch ho·∫°t (%s MB)."
        ERR_MISSING_WALLET="L·ªói: Thi·∫øu wallet address ho·∫∑c node ID."
        REGISTERING_WALLET="ƒêƒÉng k√Ω v√≠ v·ªõi wallet: %s"
        ERR_REGISTER_WALLET="L·ªói: Kh√¥ng th·ªÉ ƒëƒÉng k√Ω v√≠. Xem log:"
        SUPPORT_INFO="Th√¥ng tin h·ªó tr·ª£:"
        REGISTERING_NODE="ƒêƒÉng k√Ω node..."
        ERR_REGISTER_NODE="L·ªói: Kh√¥ng th·ªÉ ƒëƒÉng k√Ω node. Xem log:"
        NODE_STARTED_ENTRY="Node ƒë√£ kh·ªüi ƒë·ªông v·ªõi wallet_address=%s. Log: /root/nexus.log"
        STARTUP_FAILED="Kh·ªüi ƒë·ªông th·∫•t b·∫°i. Xem log:"
        NODE_ID_SAVED="Node ID ƒë√£ ƒë∆∞·ª£c l∆∞u: %s"
        USING_EXISTING_NODE_ID="S·ª≠ d·ª•ng node ID hi·ªán c√≥: %s"
        CRON_SETUP="Thi·∫øt l·∫≠p cron job ƒë·ªÉ kh·ªüi t·∫°o l·∫°i container m·ªói gi·ªù."
        ARCH_DETECTED="Ph√°t hi·ªán ki·∫øn tr√∫c h·ªá th·ªëng: %s. S·ª≠ d·ª•ng CLI ph√π h·ª£p."
        WAIT_NODE_ID="ƒêang ch·ªù node ID ƒë∆∞·ª£c t·∫°o... (timeout sau %s gi√¢y)"
        ERR_NO_NODE_ID="L·ªói: Kh√¥ng th·ªÉ l·∫•y node ID sau th·ªùi gian ch·ªù."
        CRON_DONE="Cron job ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p: %s"
        ;;
    en)
        BANNER="===== Nexus Node Setup v1.4.1 (ARM Support) ====="
        ERR_NO_WALLET="Error: Please provide wallet address. Usage: $0 <wallet_address> [--no-swap] [--en|--ru|--cn] [--setup-cron]"
        WARN_INVALID_FLAG="Warning: Invalid flag: %s. Skipping."
        SKIP_SWAP_FLAG="Skipping swap creation as per request (--no-swap)."
        INSTALLING_DOCKER="Installing Docker..."
        ERR_INSTALL_DOCKER="Error: Unable to install Docker."
        ERR_DOCKER_NOT_RUNNING="Error: Docker daemon is not running."
        ERR_DOCKER_PERMISSION="Error: No permission to run Docker. Check installation or add user to docker group."
        BUILDING_IMAGE="Starting to build image %s..."
        ERR_BUILD_IMAGE="Error: Unable to build image %s."
        BUILD_IMAGE_SUCCESS="Built image %s successfully."
        NODE_STARTED="Node started with wallet_address=%s."
        LOG_FILE_MSG="Log: %s"
        VIEW_LOG="View real-time log: docker logs -f %s"
        NOT_LINUX="System is not Linux, skipping swap creation."
        WARN_NO_RAM="Warning: Unable to determine system RAM. Skipping swap creation and continuing to run node."
        RAM_DETECTED="Detected total RAM: %s MB. Continuing to check swap..."
        SWAP_EXISTS="Swap already exists (%s MB), skipping swap creation."
        INSUFFICIENT_DISK="Insufficient disk space (%s MB) to create minimum swap (%s MB). Skipping."
        WARN_INVALID_SWAP_SIZE="Warning: Invalid swap size (%s MB). Skipping swap creation."
        CREATING_SWAP="Creating swap %s MB..."
        WARN_CREATE_SWAP_FAIL="Warning: Unable to create swap file. Skipping."
        SWAP_CREATED="Swap created and activated (%s MB)."
        ERR_MISSING_WALLET="Error: Missing wallet address or node ID."
        REGISTERING_WALLET="Registering wallet with: %s"
        ERR_REGISTER_WALLET="Error: Unable to register wallet. Check log:"
        SUPPORT_INFO="Support information:"
        REGISTERING_NODE="Registering node..."
        ERR_REGISTER_NODE="Error: Unable to register node. Check log:"
        NODE_STARTED_ENTRY="Node started with wallet_address=%s. Log: /root/nexus.log"
        STARTUP_FAILED="Startup failed. Check log:"
        NODE_ID_SAVED="Node ID saved: %s"
        USING_EXISTING_NODE_ID="Using existing node ID: %s"
        CRON_SETUP="Setting up cron job to recreate container every hour."
        ARCH_DETECTED="Detected system architecture: %s. Using appropriate CLI."
        WAIT_NODE_ID="Waiting for node ID to be created... (timeout after %s seconds)"
        ERR_NO_NODE_ID="Error: Unable to get node ID after waiting time."
        CRON_DONE="Cron job has been set: %s"
        ;;
    ru)
        BANNER="===== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –£–∑–ª–∞ Nexus v1.4.1 (–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ARM) ====="
        ERR_NO_WALLET="–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <wallet_address> [--no-swap] [--en|--ru|--cn] [--setup-cron]"
        WARN_INVALID_FLAG="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–ª–∞–≥: %s. –ü—Ä–æ–ø—É—Å–∫–∞—é."
        SKIP_SWAP_FLAG="–ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è swap –ø–æ –∑–∞–ø—Ä–æ—Å—É (--no-swap)."
        INSTALLING_DOCKER="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
        ERR_INSTALL_DOCKER="–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker."
        ERR_DOCKER_NOT_RUNNING="–û—à–∏–±–∫–∞: Daemon Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω."
        ERR_DOCKER_PERMISSION="–û—à–∏–±–∫–∞: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø—É—Å–∫ Docker."
        BUILDING_IMAGE="–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è %s..."
        ERR_BUILD_IMAGE="–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ %s."
        BUILD_IMAGE_SUCCESS="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ %s —Å–æ–±—Ä–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ."
        NODE_STARTED="–£–∑–µ–ª –∑–∞–ø—É—â–µ–Ω —Å wallet_address=%s."
        LOG_FILE_MSG="–õ–æ–≥: %s"
        VIEW_LOG="–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: docker logs -f %s"
        NOT_LINUX="–°–∏—Å—Ç–µ–º–∞ –Ω–µ Linux, –ø—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è swap."
        WARN_NO_RAM="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å RAM —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è swap –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —É–∑–ª–∞."
        RAM_DETECTED="–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ RAM: %s –ú–ë. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ swap..."
        SWAP_EXISTS="Swap —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (%s –ú–ë), –ø—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è swap."
        INSUFFICIENT_DISK="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (%s –ú–ë) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ swap (%s –ú–ë). –ü—Ä–æ–ø—É—Å–∫."
        WARN_INVALID_SWAP_SIZE="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä swap (%s –ú–ë). –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è swap."
        CREATING_SWAP="–°–æ–∑–¥–∞–Ω–∏–µ swap %s –ú–ë..."
        WARN_CREATE_SWAP_FAIL="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª swap. –ü—Ä–æ–ø—É—Å–∫."
        SWAP_CREATED="Swap —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (%s –ú–ë)."
        ERR_MISSING_WALLET="–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ node ID."
        REGISTERING_WALLET="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ —Å: %s"
        ERR_REGISTER_WALLET="–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥:"
        SUPPORT_INFO="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:"
        REGISTERING_NODE="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∑–ª–∞..."
        ERR_REGISTER_NODE="–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∑–µ–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥:"
        NODE_STARTED_ENTRY="–£–∑–µ–ª –∑–∞–ø—É—â–µ–Ω —Å wallet_address=%s. –õ–æ–≥: /root/nexus.log"
        STARTUP_FAILED="–ó–∞–ø—É—Å–∫ –Ω–µ—É–¥–∞—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥:"
        NODE_ID_SAVED="Node ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s"
        USING_EXISTING_NODE_ID="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ node ID: %s"
        ARCH_DETECTED="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã: %s. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ CLI."
        WAIT_NODE_ID="–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è node ID... (—Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ %s —Å–µ–∫—É–Ω–¥)"
        ERR_NO_NODE_ID="–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å node ID –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è."
        CRON_SETUP="–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é cron –Ω–∞ –µ–∂–µ—á–∞—Å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."
        CRON_DONE="Cron-–∑–∞–¥–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %s"
        ;;
    cn)
        BANNER="===== Nexus ËäÇÁÇπËÆæÁΩÆ v1.4.1 (ARM ÊîØÊåÅ) ====="
        ERR_NO_WALLET="ÈîôËØØÔºöËØ∑Êèê‰æõÈí±ÂåÖÂú∞ÂùÄ„ÄÇÁî®Ê≥ïÔºö$0 <wallet_address> [--no-swap] [--en|--ru|--cn] [--setup-cron]"
        WARN_INVALID_FLAG="Ë≠¶ÂëäÔºöÊó†ÊïàÊ†áÂøóÔºö%s„ÄÇË∑≥Ëøá„ÄÇ"
        SKIP_SWAP_FLAG="Ê†πÊçÆËØ∑Ê±ÇË∑≥ËøáswapÂàõÂª∫ (--no-swap)„ÄÇ"
        INSTALLING_DOCKER="Ê≠£Âú®ÂÆâË£ÖDocker..."
        ERR_INSTALL_DOCKER="ÈîôËØØÔºöÊó†Ê≥ïÂÆâË£ÖDocker„ÄÇ"
        ERR_DOCKER_NOT_RUNNING="ÈîôËØØÔºöDockerÂÆàÊä§ËøõÁ®ãÊú™ËøêË°å„ÄÇ"
        ERR_DOCKER_PERMISSION="ÈîôËØØÔºöÊ≤°ÊúâËøêË°åDockerÁöÑÊùÉÈôê„ÄÇËØ∑Ê£ÄÊü•ÂÆâË£ÖÊàñÂ∞ÜÁî®Êà∑Ê∑ªÂä†Âà∞dockerÁªÑ„ÄÇ"
        BUILDING_IMAGE="ÂºÄÂßãÊûÑÂª∫ÈïúÂÉè %s..."
        ERR_BUILD_IMAGE="ÈîôËØØÔºöÊó†Ê≥ïÊûÑÂª∫ÈïúÂÉè %s„ÄÇ"
        BUILD_IMAGE_SUCCESS="ÈïúÂÉè %s ÊûÑÂª∫ÊàêÂäü„ÄÇ"
        NODE_STARTED="ËäÇÁÇπÂ∑≤ÂêØÂä®Ôºåwallet_address=%s„ÄÇ"
        LOG_FILE_MSG="Êó•ÂøóÔºö%s"
        VIEW_LOG="Êü•ÁúãÂÆûÊó∂Êó•ÂøóÔºödocker logs -f %s"
        NOT_LINUX="Á≥ªÁªü‰∏çÊòØLinuxÔºåË∑≥ËøáswapÂàõÂª∫„ÄÇ"
        WARN_NO_RAM="Ë≠¶ÂëäÔºöÊó†Ê≥ïÁ°ÆÂÆöÁ≥ªÁªüRAM„ÄÇË∑≥ËøáswapÂàõÂª∫Âπ∂ÁªßÁª≠ËøêË°åËäÇÁÇπ„ÄÇ"
        RAM_DETECTED="Ê£ÄÊµãÂà∞ÊÄªRAMÔºö%s MB„ÄÇÁªßÁª≠Ê£ÄÊü•swap..."
        SWAP_EXISTS="SwapÂ∑≤Â≠òÂú®Ôºà%s MBÔºâÔºåË∑≥ËøáswapÂàõÂª∫„ÄÇ"
        INSUFFICIENT_DISK="Á£ÅÁõòÁ©∫Èó¥‰∏çË∂≥Ôºà%s MBÔºâ‰ª•ÂàõÂª∫ÊúÄÂ∞èswapÔºà%s MBÔºâ„ÄÇË∑≥Ëøá„ÄÇ"
        WARN_INVALID_SWAP_SIZE="Ë≠¶ÂëäÔºöÊó†ÊïàÁöÑswapÂ§ßÂ∞èÔºà%s MBÔºâ„ÄÇË∑≥ËøáswapÂàõÂª∫„ÄÇ"
        CREATING_SWAP="ÂàõÂª∫swap %s MB..."
        WARN_CREATE_SWAP_FAIL="Ë≠¶ÂëäÔºöÊó†Ê≥ïÂàõÂª∫swapÊñá‰ª∂„ÄÇË∑≥Ëøá„ÄÇ"
        SWAP_CREATED="SwapÂ∑≤ÂàõÂª∫Âπ∂ÊøÄÊ¥ªÔºà%s MBÔºâ„ÄÇ"
        ERR_MISSING_WALLET="ÈîôËØØÔºöÁº∫Â∞ëÈí±ÂåÖÂú∞ÂùÄÊàñnode ID„ÄÇ"
        REGISTERING_WALLET="Ê≠£Âú®Ê≥®ÂÜåÈí±ÂåÖÔºö%s"
        ERR_REGISTER_WALLET="ÈîôËØØÔºöÊó†Ê≥ïÊ≥®ÂÜåÈí±ÂåÖ„ÄÇÊ£ÄÊü•Êó•ÂøóÔºö"
        SUPPORT_INFO="ÊîØÊåÅ‰ø°ÊÅØÔºö"
        REGISTERING_NODE="Ê≠£Âú®Ê≥®ÂÜåËäÇÁÇπ..."
        ERR_REGISTER_NODE="ÈîôËØØÔºöÊó†Ê≥ïÊ≥®ÂÜåËäÇÁÇπ„ÄÇÊ£ÄÊü•Êó•ÂøóÔºö"
        NODE_STARTED_ENTRY="ËäÇÁÇπÂ∑≤ÂêØÂä®Ôºåwallet_address=%s„ÄÇÊó•ÂøóÔºö/root/nexus.log"
        STARTUP_FAILED="ÂêØÂä®Â§±Ë¥•„ÄÇÊ£ÄÊü•Êó•ÂøóÔºö"
        NODE_ID_SAVED="Node ID Â∑≤‰øùÂ≠òÔºö%s"
        USING_EXISTING_NODE_ID="‰ΩøÁî®Áé∞ÊúâÁöÑ node IDÔºö%s"
        ARCH_DETECTED="Ê£ÄÊµãÂà∞Á≥ªÁªüÊû∂ÊûÑÔºö%s„ÄÇ‰ΩøÁî®ÈÄÇÂΩìÁöÑ CLI„ÄÇ"
        WAIT_NODE_ID="Ê≠£Âú®Á≠âÂæÖËäÇÁÇπIDÂàõÂª∫...ÔºàË∂ÖÊó∂Âêé %s ÁßíÔºâ"
        ERR_NO_NODE_ID="ÈîôËØØÔºöÁ≠âÂæÖÂêé‰ªçÊó†Ê≥ïËé∑ÂèñËäÇÁÇπID„ÄÇ"
        CRON_SETUP="ËÆæÁΩÆÊØèÂ∞èÊó∂ÈáçÊñ∞ÂàõÂª∫ÂÆπÂô®ÁöÑcron‰ªªÂä°„ÄÇ"
        CRON_DONE="Cron‰ªªÂä°Â∑≤ËÆæÁΩÆÔºö%s"
        ;;
esac

print_info "$BANNER"

# =====================
# Ki·ªÉm tra wallet address
# =====================
if [ -z "$WALLET_ADDRESS" ]; then
    print_error "$ERR_NO_WALLET"
    exit 1
fi

# =====================
# Parse c√°c c·ªù c√≤n l·∫°i (sau khi ƒë√£ x√°c ƒë·ªãnh ng√¥n ng·ªØ)
# =====================
for arg in "$@"; do
    case "$arg" in
        --no-swap) NO_SWAP=1 ;;
        --setup-cron) SETUP_CRON=1 ;;
        --en|--ru|--cn) : ;; # ƒë√£ x·ª≠ l√Ω ·ªü b∆∞·ªõc tr∆∞·ªõc
        *) print_warning "$(printf "$WARN_INVALID_FLAG" "$arg")" ;;
    esac
done

# =====================
# Ph√°t hi·ªán ki·∫øn tr√∫c h·ªá th·ªëng ƒë·ªÉ ch·ªçn CLI suffix
# =====================
ARCH=$(uname -m)
print_info "$(printf "$ARCH_DETECTED" "$ARCH")"
CLI_SUFFIX="linux-x86_64"
if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
    CLI_SUFFIX="linux-arm64"
fi

# =====================
# T·∫£i latest tag t·ª´ GitHub API (c√†i jq n·∫øu ch∆∞a c√≥)
# =====================
if ! command -v jq > /dev/null 2>&1; then
    apt update && apt install -y jq
fi
LATEST_TAG=$(curl -s https://api.github.com/repos/nexus-xyz/nexus-cli/releases/latest | jq -r .tag_name)
CLI_URL="https://github.com/nexus-xyz/nexus-cli/releases/download/${LATEST_TAG}/nexus-network-${CLI_SUFFIX}"

# =====================
# H√†m t·∫°o swap t·ª± ƒë·ªông
# =====================
create_swap() {
    if [ "$(uname -s)" != "Linux" ]; then
        print_warning "$NOT_LINUX"
        return 0
    fi

    total_ram=""
    if [ -f /proc/meminfo ]; then
        total_ram=$(awk '/MemTotal/ {print int($2 / 1024)}' /proc/meminfo 2>/dev/null) || true
    fi
    if [ -z "$total_ram" ] || [ "$total_ram" -le 0 ]; then
        total_ram=$(free -m | awk '/^Mem:/{print $2}' 2>/dev/null) || true
    fi
    if [ -z "$total_ram" ] || [ "$total_ram" -le 0 ]; then
        total_ram=$(vmstat -s | awk '/total memory/{print int($1 / 1024)}' 2>/dev/null) || true
    fi
    if [ -z "$total_ram" ] || [ "$total_ram" -le 0 ]; then
        print_warning "$WARN_NO_RAM"
        return 0
    fi

    print_info "$(printf "$RAM_DETECTED" "$total_ram")"

    if swapon --show | grep -q "$SWAP_FILE"; then
        current_swap=$(free -m | awk '/^Swap:/{print $2}' 2>/dev/null) || true
        if [ -n "$current_swap" ] && [ "$current_swap" -ge "$total_ram" ]; then
            print_info "$(printf "$SWAP_EXISTS" "$current_swap")"
            return 0
        fi
        swapoff "$SWAP_FILE" 2>/dev/null || true
    fi

    min_swap=$total_ram
    max_swap=$((total_ram * 2))
    available_disk=$(df -BM --output=avail "$(dirname "$SWAP_FILE")" | tail -n 1 | grep -o '[0-9]\+' 2>/dev/null) || true
    if [ -z "$available_disk" ] || [ "$available_disk" -lt "$min_swap" ]; then
        print_warning "$(printf "$INSUFFICIENT_DISK" "$available_disk" "$min_swap")"
        return 0
    fi

    swap_size=$min_swap
    if [ "$available_disk" -ge "$max_swap" ]; then
        swap_size=$max_swap
    fi

    if [ "$swap_size" -le 0 ]; then
        print_warning "$(printf "$WARN_INVALID_SWAP_SIZE" "$swap_size")"
        return 0
    fi

    print_progress "$(printf "$CREATING_SWAP" "$swap_size")"
    if ! fallocate -l "${swap_size}M" "$SWAP_FILE" 2>/dev/null; then
        dd if=/dev/zero of="$SWAP_FILE" bs=1M count="$swap_size" 2>/dev/null || true
    fi
    if [ ! -f "$SWAP_FILE" ] || [ $(stat -c %s "$SWAP_FILE" 2>/dev/null) -le 0 ]; then
        print_warning "$WARN_CREATE_SWAP_FAIL"
        return 0
    fi
    chmod 600 "$SWAP_FILE" 2>/dev/null || true
    mkswap "$SWAP_FILE" 2>/dev/null || true
    swapon "$SWAP_FILE" 2>/dev/null || true
    if ! grep -q "$SWAP_FILE" /etc/fstab 2>/dev/null; then
        echo "$SWAP_FILE none swap sw 0 0" >> /etc/fstab 2>/dev/null || true
    fi
    print_swap "$(printf "$SWAP_CREATED" "$swap_size")"
    return 0
}

# =====================
# C√†i ƒë·∫∑t Docker n·∫øu ch∆∞a c√≥
# =====================
if ! command -v docker >/dev/null 2>&1; then
    print_progress "$INSTALLING_DOCKER"
    apt update
    if ! apt install -y docker.io; then
        print_error "$ERR_INSTALL_DOCKER"
        exit 1
    fi
    systemctl enable docker 2>/dev/null || true
    systemctl start docker 2>/dev/null || true
    if ! systemctl is-active --quiet docker 2>/dev/null; then
        print_error "$ERR_DOCKER_NOT_RUNNING"
        exit 1
    fi
fi

if ! docker ps >/dev/null 2>&1; then
    print_error "$ERR_DOCKER_PERMISSION"
    exit 1
fi

# =====================
# X√¢y d·ª±ng Docker image
# =====================
build_image() {
    print_progress "$(printf "$BUILDING_IMAGE" "$IMAGE_NAME")"
    workdir=$(mktemp -d)
    cd "$workdir"

    cat > Dockerfile <<EOF
FROM ubuntu:24.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y curl screen bash jq procps && rm -rf /var/lib/apt/lists/*
RUN curl -L $CLI_URL -o /usr/local/bin/nexus-network && chmod +x /usr/local/bin/nexus-network
RUN mkdir -p /root/.nexus
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
EOF

    cat > entrypoint.sh <<'EOF'
#!/bin/bash
set -e

# Ensure dirs exist and are writable
mkdir -p /root/.nexus
touch /root/nexus.log || true

if [ -z "$WALLET_ADDRESS" ] && [ -z "$NODE_ID" ]; then
    echo "‚ùå Missing wallet address or node ID"
    exit 1
fi

if [ -n "$NODE_ID" ]; then
    echo "‚è≥ Starting with node ID: $NODE_ID"
    screen -dmS nexus bash -c "nexus-network start --node-id $NODE_ID &>> /root/nexus.log"
else
    echo "‚è≥ Registering wallet: $WALLET_ADDRESS"
    if ! nexus-network register-user --wallet-address "$WALLET_ADDRESS" &>> /root/nexus.log; then
        echo "‚ùå Unable to register wallet"
        cat /root/nexus.log
        nexus-network --help &>> /root/nexus.log || true
        cat /root/nexus.log
        exit 1
    fi
    echo "‚è≥ Registering node..."
    if ! nexus-network register-node &>> /root/nexus.log; then
        echo "‚ùå Unable to register node"
        cat /root/nexus.log
        nexus-network register-node --help &>> /root/nexus.log || true
        cat /root/nexus.log
        exit 1
    fi
    NODE_ID=$(jq -r '.node_id' /root/.nexus/config.json 2>/dev/null)
    if [ -z "$NODE_ID" ] || [ "$NODE_ID" = "null" ]; then
        echo "‚ùå Cannot extract node ID from config.json"
        cat /root/nexus.log
        exit 1
    fi
    echo "‚ÑπÔ∏è Node ID: $NODE_ID"
    screen -dmS nexus bash -c "nexus-network start --node-id $NODE_ID &>> /root/nexus.log"
fi

sleep 3
if screen -list | grep -q "nexus"; then
    echo "üöÄ Node started. Log: /root/nexus.log"
else
    echo "‚ùå Startup failed"
    cat /root/nexus.log
    exit 1
fi

# Keep container running and stream logs
tail -f /root/nexus.log
EOF

    if ! docker build -t "$IMAGE_NAME" .; then
        print_error "$(printf "$ERR_BUILD_IMAGE" "$IMAGE_NAME")"
        cd - >/dev/null
        rm -rf "$workdir"
        exit 1
    fi
    cd - >/dev/null
    rm -rf "$workdir"
    print_success "$(printf "$BUILD_IMAGE_SUCCESS" "$IMAGE_NAME")"
}

# =====================
# H√†m ch·∫°y container
# =====================
run_container() {
    docker rm -f "$CONTAINER_NAME" 2>/dev/null || true
    mkdir -p "$(dirname "$LOG_FILE")" "$CREDENTIALS_DIR"
    # B·∫£o ƒë·∫£m th∆∞ m·ª•c credentials ghi ƒë∆∞·ª£c
    chmod 700 "$CREDENTIALS_DIR" 2>/dev/null || true

    touch "$LOG_FILE"
    : > "$LOG_FILE"
    chmod 644 "$LOG_FILE"

    NODE_ID=""
    if [ -f "$NODE_ID_FILE" ]; then
        NODE_ID=$(cat "$NODE_ID_FILE")
        [ -n "$NODE_ID" ] && print_info "$(printf "$USING_EXISTING_NODE_ID" "$NODE_ID")"
    fi

    docker run -d --name "$CONTAINER_NAME" \
      --restart unless-stopped \
      -v "$LOG_FILE":/root/nexus.log:rw \
      -v "$CREDENTIALS_DIR":/root/.nexus:rw \
      -e WALLET_ADDRESS="$WALLET_ADDRESS" \
      -e NODE_ID="$NODE_ID" \
      --health-cmd='pidof nexus-network || exit 1' \
      --health-interval=30s \
      --health-retries=3 \
      "$IMAGE_NAME"

    print_node "$(printf "$NODE_STARTED" "$WALLET_ADDRESS")"
    print_log "$(printf "$LOG_FILE_MSG" "$LOG_FILE")"
    print_info "$(printf "$VIEW_LOG" "$CONTAINER_NAME")"

    if [ -z "$NODE_ID" ]; then
        TIMEOUT=120
        WAIT_TIME=0
        print_progress "$(printf "$WAIT_NODE_ID" "$TIMEOUT")"
        while [ $WAIT_TIME -lt $TIMEOUT ]; do
            if [ -f "$CREDENTIALS_DIR/config.json" ]; then
                NODE_ID=$(jq -r '.node_id // empty' "$CREDENTIALS_DIR/config.json" 2>/dev/null)
                if [ -n "$NODE_ID" ]; then
                    echo "$NODE_ID" > "$NODE_ID_FILE"
                    print_success "$(printf "$NODE_ID_SAVED" "$NODE_ID")"
                    return
                fi
            fi
            sleep 5
            WAIT_TIME=$((WAIT_TIME + 5))
        done
        print_error "$ERR_NO_NODE_ID"
        exit 1
    fi
}

# =====================
# Cron helpers (idempotent)
# =====================
ensure_cron_installed() {
    if ! command -v crontab >/dev/null 2>&1; then
        apt update && apt install -y cron
        systemctl enable cron 2>/dev/null || true
        systemctl start cron 2>/dev/null || true
    fi
}

setup_hourly_cron() {
    print_info "$CRON_SETUP"
    ensure_cron_installed

    # ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi
    SCRIPT_PATH="$(readlink -f "$0" 2>/dev/null || realpath "$0" 2>/dev/null || echo "$0")"

    # Gi·ªØ ng√¥n ng·ªØ
    LANG_FLAG=""
    case "$LANGUAGE" in
        en|ru|cn) LANG_FLAG="--$LANGUAGE" ;;
    esac

    # Marker duy nh·∫•t
    CRON_MARK="# NEXUS_NODE_RECREATE:$WALLET_ADDRESS - managed by $SCRIPT_PATH"

    # M·ªói gi·ªù, ph√∫t 0
    CRON_EXPR="0 * * * *"

    # ∆Øu ti√™n restart nhanh; n·∫øu fail th√¨ ch·∫°y l·∫°i script (kh√¥ng ƒë·ª•ng swap)
    CRON_JOB="$CRON_EXPR (docker restart $CONTAINER_NAME >/dev/null 2>&1 || (docker rm -f $CONTAINER_NAME >/dev/null 2>&1; /bin/bash $SCRIPT_PATH $WALLET_ADDRESS --no-swap $LANG_FLAG))"

    TMP="$(mktemp)"
    crontab -l 2>/dev/null > "$TMP" || true

    grep -Fv "$CRON_MARK" "$TMP" | grep -Fv "$SCRIPT_PATH $WALLET_ADDRESS" > "${TMP}.new" || true
    { cat "${TMP}.new"; echo "$CRON_MARK"; echo "$CRON_JOB"; } | crontab -
    rm -f "$TMP" "${TMP}.new"

    print_success "$(printf "$CRON_DONE" "$CRON_JOB")"
}

# =====================
# T·∫°o swap (n·∫øu kh√¥ng b·ªè qua)
# =====================
if [ "$NO_SWAP" = 1 ]; then
    print_warning "$SKIP_SWAP_FLAG"
else
    create_swap
fi

# =====================
# X√¢y d·ª±ng v√† ch·∫°y
# =====================
build_image
run_container

# =====================
# Thi·∫øt l·∫≠p cron n·∫øu y√™u c·∫ßu (idempotent)
# =====================
if [ "$SETUP_CRON" = 1 ]; then
    setup_hourly_cron
fi

# =====================
# K·∫øt th√∫c
# =====================
print_success "===== Ho√†n T·∫•t C√†i ƒê·∫∑t ====="
